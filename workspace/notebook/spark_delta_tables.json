{
	"name": "spark_delta_tables",
	"properties": {
		"folder": {
			"name": "notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "hallincspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": true,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "03029928-73cd-4d18-9ee0-163e41c46489"
			}
		},
		"metadata": {
			"saveOutput": false,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a011ea95-c1fe-4125-9cef-82abcac7f740/resourceGroups/hallinc-rg/providers/Microsoft.Synapse/workspaces/hallinc-synapse/bigDataPools/hallincspark",
				"name": "hallincspark",
				"type": "Spark",
				"endpoint": "https://hallinc-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/hallincspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 120
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<b> Delta tables <b>"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Load a file into a dataframe\r\n",
					"df = spark.read.load(\r\n",
					"    'abfss://hallinc@hallincdatalake.dfs.core.windows.net/raw/products/product_data.csv/*csv',\r\n",
					"    format='csv',\r\n",
					"    header=True\r\n",
					")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Save the dataframe as a delta table \r\n",
					"\r\n",
					"delta_table_path = 'abfss://hallinc@hallincdatalake.dfs.core.windows.net/delta/products'\r\n",
					"\r\n",
					"df.write \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .mode('overwrite') \\\r\n",
					"    .save(delta_table_path)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# conditional updates\r\n",
					"\r\n",
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"delta_table_path = 'abfss://hallinc@hallincdatalake.dfs.core.windows.net/delta/products'\r\n",
					"\r\n",
					"# Create a deltaTable object\r\n",
					"deltatable = DeltaTable.forPath(spark, delta_table_path)\r\n",
					"\r\n",
					"# Update the table (reduce price of accessories by 10%)\r\n",
					"deltatable.update(\r\n",
					"    condition = \"Category == 'Lights'\",\r\n",
					"    set = { \"ListPrice\": \"ListPrice * 0.9\" }\r\n",
					")"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# query older version \r\n",
					"df = spark \\\r\n",
					"    .read.format(\"delta\") \\\r\n",
					"    .option(\"versionAsOf\", 0) \\\r\n",
					"    .load(delta_table_path)\r\n",
					"\r\n",
					"display(df.filter(df['Category']=='Lights'))"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# query new version \r\n",
					"df = spark \\\r\n",
					"    .read.format(\"delta\") \\\r\n",
					"    .option(\"versionAsOf\", 1) \\\r\n",
					"    .load(delta_table_path)\r\n",
					"\r\n",
					"display(df.filter(df['Category']=='Lights'))"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"<b> Catalog tables <b>"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# create managed and external catalog tables\r\n",
					"\r\n",
					"path = 'abfss://hallinc@hallincdatalake.dfs.core.windows.net/delta/products_external'\r\n",
					"\r\n",
					"# Save a dataframe as a managed table, no path needed\r\n",
					"df.write \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .saveAsTable(\"products_managed\")\r\n",
					"\r\n",
					"## specify a path option to save as an external table\r\n",
					"df.write \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .option(\"path\", path) \\\r\n",
					"    .saveAsTable(\"products_external\")\r\n",
					""
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(\r\n",
					"    spark.sql('SELECT * FROM products_managed')\r\n",
					")"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- create table schema\r\n",
					"\r\n",
					"CREATE TABLE ManagedSalesOrders\r\n",
					"(\r\n",
					"    Orderid INT NOT NULL,\r\n",
					"    OrderDate TIMESTAMP NOT NULL,\r\n",
					"    CustomerName STRING,\r\n",
					"    SalesTotal FLOAT NOT NULL\r\n",
					")\r\n",
					"USING DELTA"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- query the table\r\n",
					"SELECT orderid, salestotal\r\n",
					"FROM ManagedSalesOrders"
				],
				"execution_count": 28
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# create catalog table using DeltaTableBuilder\r\n",
					"\r\n",
					"from delta.tables import *\r\n",
					"\r\n",
					"DeltaTable.create(spark) \\\r\n",
					"  .tableName(\"default.ManagedProducts\") \\\r\n",
					"  .addColumn(\"Productid\", \"INT\") \\\r\n",
					"  .addColumn(\"ProductName\", \"STRING\") \\\r\n",
					"  .addColumn(\"Category\", \"STRING\") \\\r\n",
					"  .addColumn(\"Price\", \"FLOAT\") \\\r\n",
					"  .execute()"
				],
				"execution_count": 27
			}
		]
	}
}
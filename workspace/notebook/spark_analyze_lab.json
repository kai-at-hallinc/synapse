{
	"name": "spark_analyze_lab",
	"properties": {
		"folder": {
			"name": "notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "hallincspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "edbe68c8-419a-4cfb-8aff-40bbc6281790"
			}
		},
		"metadata": {
			"saveOutput": false,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a011ea95-c1fe-4125-9cef-82abcac7f740/resourceGroups/hallinc-rg/providers/Microsoft.Synapse/workspaces/hallinc-synapse/bigDataPools/hallincspark",
				"name": "hallincspark",
				"type": "Spark",
				"endpoint": "https://hallinc-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/hallincspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"jupyter": {
						"outputs_hidden": true
					},
					"collapsed": false
				},
				"source": [
					"  %%pyspark\r\n",
					" from pyspark.sql.types import *\r\n",
					" from pyspark.sql.functions import *\r\n",
					"\r\n",
					" schema = StructType([\r\n",
					"     StructField(\"SalesOrderNumber\", StringType()),\r\n",
					"     StructField(\"SalesOrderLineNumber\", IntegerType()),\r\n",
					"     StructField(\"OrderDate\", DateType()),\r\n",
					"     StructField(\"CustomerName\", StringType()),\r\n",
					"     StructField(\"Email\", StringType()),\r\n",
					"     StructField(\"Item\", StringType()),\r\n",
					"     StructField(\"Quantity\", IntegerType()),\r\n",
					"     StructField(\"UnitPrice\", FloatType()),\r\n",
					"     StructField(\"Tax\", FloatType())\r\n",
					"     ])\r\n",
					"\r\n",
					" df = spark.read.load(\r\n",
					"    'abfss://hallinc@hallincdatalake.dfs.core.windows.net/raw/sales/csv/*.csv',\r\n",
					"    format='csv',\r\n",
					"    schema=schema\r\n",
					" )\r\n",
					" display(df.limit(100))"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.printSchema()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# analyze customer counts\r\n",
					"customer = df['CustomerName', 'Email']\r\n",
					"print(customer.count())\r\n",
					"print(customer.distinct().count())\r\n",
					"display(customer.distinct())"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# analyze customer count by product\r\n",
					"\r\n",
					"customer = df.select('CustomerName', 'Email').where(df['Item'] =='Road-250 Red, 52')\r\n",
					"print(customer.count())\r\n",
					"print(customer.distinct().count())\r\n",
					"display(customer.distinct())"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# group by item\r\n",
					"productSales = df.select(\"Item\", \"Quantity\").groupBy(\"Item\").sum()\r\n",
					"display(productSales)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"\r\n",
					"yearlySales = df.select(\r\n",
					"    year(\"OrderDate\").alias(\"Year\")) \\\r\n",
					"    .groupBy(\"Year\") \\\r\n",
					"    .count() \\\r\n",
					"    .orderBy(\"Year\")\r\n",
					"display(yearlySales)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# query with spark.sql\r\n",
					"\r\n",
					"# create temp view\r\n",
					"df.createOrReplaceTempView('salesorder')\r\n",
					"\r\n",
					"#query with spark.sql\r\n",
					"sales_df = spark.sql(\"SELECT * FROM salesorder LIMIT 5\")\r\n",
					"display(sales_df)"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- query spark temp view directly with sql\r\n",
					"SELECT \r\n",
					"    YEAR(OrderDate) AS OrderYear,\r\n",
					"    SUM((UnitPrice * Quantity) + Tax) AS GrossRevenue\r\n",
					"FROM salesorder\r\n",
					"GROUP BY YEAR(OrderDate)\r\n",
					"ORDER BY OrderYear;"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"--analyze using charts\r\n",
					" SELECT * FROM salesorder"
				],
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# matplotlib\r\n",
					"\r\n",
					"# create query\r\n",
					"sqlQuery = \"SELECT CAST(YEAR(OrderDate) AS CHAR(4)) AS OrderYear, \\\r\n",
					"            SUM((UnitPrice * Quantity) + Tax) AS GrossRevenue \\\r\n",
					"            FROM salesorder \\\r\n",
					"            GROUP BY CAST(YEAR(OrderDate) AS CHAR(4)) \\\r\n",
					"            ORDER BY OrderYear\"\r\n",
					"\r\n",
					"df_spark = spark.sql(sqlQuery).na.drop('all')\r\n",
					"df_spark.show()"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# visualize with plt\r\n",
					"\r\n",
					"from matplotlib import pyplot as plt\r\n",
					"\r\n",
					"# convert to pandas\r\n",
					"df_sales = df_spark.toPandas()\r\n",
					"\r\n",
					"# clear the plot area\r\n",
					"plt.clf()\r\n",
					"\r\n",
					"# create a figure\r\n",
					"fig = plt.figure(figsize=(8,3))\r\n",
					"\r\n",
					"# bar plot of revenue by year\r\n",
					"plt.bar(x=df_sales['OrderYear'], height=df_sales['GrossRevenue'])\r\n",
					"\r\n",
					"# Customize the chart\r\n",
					"plt.title('Revenue by Year')\r\n",
					"plt.xlabel('Year')\r\n",
					"plt.ylabel('Revenue')\r\n",
					"plt.grid(color='#95a5a6', linestyle='--', linewidth=1, axis='y', alpha=0.4)\r\n",
					"plt.xticks(rotation=45, fontsize=8)\r\n",
					"plt.tight_layout\r\n",
					"plt.show();"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# subplots\r\n",
					"plt.clf()\r\n",
					"\r\n",
					"# Create a figure for 2 subplots (1 row, 2 columns)\r\n",
					"fig, ax = plt.subplots(1, 2, figsize = (10,4))\r\n",
					"\r\n",
					"# Create a bar plot of revenue by year on the first axis\r\n",
					"ax[0].bar(x=df_sales['OrderYear'], height=df_sales['GrossRevenue'], color='orange')\r\n",
					"ax[0].set_title('Revenue by Year')\r\n",
					"\r\n",
					"# Create a pie chart of yearly order counts on the second axis\r\n",
					"yearly_counts = df_sales['OrderYear'].value_counts()\r\n",
					"ax[1].pie(yearly_counts)\r\n",
					"ax[1].set_title('Orders per Year')\r\n",
					"ax[1].legend(yearly_counts.keys().tolist())\r\n",
					"\r\n",
					"# Add a title to the Figure\r\n",
					"fig.suptitle('Sales Data')\r\n",
					"\r\n",
					"plt.show()"
				],
				"execution_count": 34
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# same with seaborn\r\n",
					"\r\n",
					"import seaborn as sns\r\n",
					"\r\n",
					"# Clear the plot area\r\n",
					"plt.clf()\r\n",
					"\r\n",
					"# Set the visual theme for seaborn\r\n",
					"sns.set_theme(style=\"whitegrid\")\r\n",
					"\r\n",
					"# Create a bar chart\r\n",
					"ax = sns.barplot(x=\"OrderYear\", y=\"GrossRevenue\", data=df_sales)\r\n",
					"plt.show()"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Clear the plot area\r\n",
					"plt.clf()\r\n",
					"\r\n",
					"# Set the visual theme for seaborn\r\n",
					"sns.set_theme(style=\"whitegrid\")\r\n",
					"\r\n",
					"# Create a line chart\r\n",
					"ax = sns.lineplot(x=\"OrderYear\", y=\"GrossRevenue\", data=df_sales)\r\n",
					"plt.show()"
				],
				"execution_count": 38
			}
		]
	}
}
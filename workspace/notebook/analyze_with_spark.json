{
	"name": "analyze_with_spark",
	"properties": {
		"folder": {
			"name": "notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "hallincspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "078af7d3-8fa5-4a22-822c-6822a5e7e642"
			}
		},
		"metadata": {
			"saveOutput": false,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a011ea95-c1fe-4125-9cef-82abcac7f740/resourceGroups/hallinc-rg/providers/Microsoft.Synapse/workspaces/hallinc-synapse/bigDataPools/hallincspark",
				"name": "hallincspark",
				"type": "Spark",
				"endpoint": "https://hallinc-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/hallincspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# import with header\r\n",
					"df = spark.read.load('abfss://hallinc@hallincdatalake.dfs.core.windows.net/raw/csv/products/products.csv',\r\n",
					"    format='csv',\r\n",
					"    header=True\r\n",
					")\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# write to new container\r\n",
					"df.write \\\r\n",
					"    .format('csv') \\\r\n",
					"    .option('header', 'true') \\\r\n",
					"    .save('abfss://hallinc@hallincdatalake.dfs.core.windows.net/raw/products/product_data.csv')"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# import with schema\r\n",
					"\r\n",
					"from pyspark.sql.types import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"#create schema\r\n",
					"productSchema = StructType([\r\n",
					"    StructField(\"Product_ID\", IntegerType()),\r\n",
					"    StructField(\"Product_Name\", StringType()),\r\n",
					"    StructField(\"Product_Category\", StringType()),\r\n",
					"    StructField(\"List_Price\", FloatType())\r\n",
					"])\r\n",
					"\r\n",
					"# import without header\r\n",
					"df = spark.read.load('abfss://hallinc@hallincdatalake.dfs.core.windows.net/raw/products/product_data.csv',\r\n",
					"    format='csv',\r\n",
					"    schema=productSchema,\r\n",
					"    header=False)\r\n",
					"display(df.limit(5))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# select from df\r\n",
					"display(\r\n",
					"    df.select(\"Product_ID\", \"List_Price\").limit(5)\r\n",
					")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# chain tarnsformations\r\n",
					"display(\r\n",
					"    df\r\n",
					"    .select(\"Product_Name\", \"List_Price\")\r\n",
					"    .where((df[\"Product_Category\"]==\"Mountain Bikes\") | (df[\"Product_Category\"]==\"Road Bikes\"))\r\n",
					"    .limit(3)\r\n",
					")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# group by attribute\r\n",
					"display(\r\n",
					"    df\r\n",
					"    .select('Product_ID', 'Product_Category')\r\n",
					"    .groupBy('Product_Category')\r\n",
					"    .count()\r\n",
					")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# create temp view\r\n",
					"df.createOrReplaceTempView(\"products\")\r\n",
					"\r\n",
					"# query temp view\r\n",
					"display(\r\n",
					"    spark.sql(\r\n",
					"        \"SELECT Product_ID, Product_Name, List_Price \\\r\n",
					"        FROM products \\\r\n",
					"        WHERE Product_Category IN ('Mountain Bikes')\"\r\n",
					"    )\r\n",
					"    .limit(3)\r\n",
					")"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"\r\n",
					"-- query temp view with sql\r\n",
					"\r\n",
					"SELECT \r\n",
					"    Product_Category, COUNT(Product_ID) AS Product_Count\r\n",
					"FROM products\r\n",
					"GROUP BY Product_Category\r\n",
					"ORDER BY Product_Category"
				],
				"execution_count": 18
			}
		]
	}
}